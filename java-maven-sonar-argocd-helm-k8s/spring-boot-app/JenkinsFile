pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        DOCKER_IMAGE = "fariyajs/springboot-1:${BUILD_NUMBER}"
        GIT_REPO_NAME = "My_Spring_boot_Project"
        GIT_USER_NAME = "Mfariyaj"
        AWS_REGION = 'us-east-1'
        ECR_REPO = 'fariyaj-spring-boot'
        AWS_ACCOUNT_ID = '905418030005'
        URL_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Checkout stage passed"
                    // Uncomment to enable Git checkout
                    // git branch: 'master', url: 'https://github.com/Mfariyaj/My_Spring_boot_Project.git'
                }
            }
        }
        stage('Build and Test') {
            steps {
                script {
                    sh '''
                        ls -ltr
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        mvn clean package
                    '''
                }
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://172.31.95.48:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonar_cred', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                    '''
                }
            }
        }
        stage('Build and Push Docker Image to ECR') {
            steps {
                script {
                    // Ensure AWS CLI is available
                    sh 'apt update && apt install -y awscli || echo "AWS CLI already installed"'
        
                    // Build the Docker image
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        docker build -t ${DOCKER_IMAGE} .
                    '''
        
                    // Authenticate with ECR without TTY
                    sh '''
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                    '''
        
                    // Tag and Push the image
                    sh '''
                        docker tag ${DOCKER_IMAGE} ${URL_REGISTRY}:${BUILD_NUMBER}
                        docker push ${URL_REGISTRY}:${BUILD_NUMBER}
                    '''
                }
            }
        }

        stage('Update Deployment File in Git') {
            steps {
                withCredentials([string(credentialsId: 'github-2', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config --global user.email "fariyajshaikh86@gmail.com"
                        git config --global user.name "fariyaj shaikh"

                        # Pull latest changes
                        git fetch origin master
                        git checkout master
                        
                        # Add and commit changes if there are any
                        git add ../spring-boot-app-manifests/deployment.yml
                        git diff --cached --quiet || git commit -m "Update Docker image tag to ${BUILD_NUMBER}"

                        # Push changes to GitHub using the token
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git master
                    '''
                }
            }
        }
    }
}
